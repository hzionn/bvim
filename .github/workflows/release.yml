name: Auto Release

on:
  push:
    branches: [ main ]
    paths: [ 'manifest.json' ]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required for creating releases and tags
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from manifest.json
      id: get_version
      run: |
        VERSION=$(jq -r '.version' manifest.json)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
        echo "Found version: $VERSION"
    
    - name: Check if tag already exists
      id: check_tag
      run: |
        if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.get_version.outputs.version }} already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Tag v${{ steps.get_version.outputs.version }} does not exist"
        fi
    
    - name: Create extension zip
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        # Create a clean directory for the extension files
        mkdir -p extension-package
        
        # Copy all necessary files for the extension
        cp manifest.json extension-package/
        cp -r src/ extension-package/
        cp -r icons/ extension-package/
        cp LICENSE extension-package/
        
        # Create the zip file
        cd extension-package
        zip -r "../bvim-${{ steps.get_version.outputs.version }}.zip" .
        cd ..
        
        # Verify the zip was created
        ls -la "bvim-${{ steps.get_version.outputs.version }}.zip"
    
    - name: Generate release notes
      if: steps.check_tag.outputs.exists == 'false'
      id: release_notes
      run: |
        # Get the latest tag (if any) for changelog
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "## Changes since $PREVIOUS_TAG" > release_notes.md
          echo "" >> release_notes.md
          git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" >> release_notes.md
        else
          echo "## Initial Release" > release_notes.md
          echo "" >> release_notes.md
          echo "- First release of Bvim - Browser Vim extension" >> release_notes.md
        fi
        
        echo "" >> release_notes.md
        echo "## Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo "1. Download the \`bvim-${{ steps.get_version.outputs.version }}.zip\` file" >> release_notes.md
        echo "2. Extract the zip file" >> release_notes.md
        echo "3. Open Chrome and go to \`chrome://extensions/\`" >> release_notes.md
        echo "4. Enable Developer mode" >> release_notes.md
        echo "5. Click 'Load unpacked' and select the extracted folder" >> release_notes.md
        
        echo "Generated release notes:"
        cat release_notes.md
    
    - name: Create GitHub Release
      if: steps.check_tag.outputs.exists == 'false'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: "Bvim ${{ steps.get_version.outputs.tag }}"
        body_path: release_notes.md
        files: |
          bvim-${{ steps.get_version.outputs.version }}.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Tag already exists
      if: steps.check_tag.outputs.exists == 'true'
      run: |
        echo "::notice::Tag ${{ steps.get_version.outputs.tag }} already exists. Skipping release creation." 